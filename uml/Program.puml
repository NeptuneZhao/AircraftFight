@startuml

class Bullet {
  - power: int
   power: int
  + goForward(): void
  + Bullet(int, int, int, int, int):
}
class BulletEnemy {
  + BulletEnemy(int, int, int, int, int):
}
class BulletHero {
  + BulletHero(int, int, int, int, int):
}
class Flying {
  # isFlying: boolean
  # speedX: int
  # image: BufferedImage
  # speedY: int
   y: int
   width: int
   notFlying: boolean
   height: int
   image: BufferedImage
   speedX: int
   isFlying: boolean
   speedY: int
   x: int
  + goForward(): void
  + setVanish(): void
  + isCrash(Flying): boolean
  + setLocation(double, double): void
  + Flying():
  + Flying(int, int, int, int):
}
class Game {
  - PaintImageWithPositionRevised(Graphics, List<Flying>): void
  - PaintScoreAndHealth(Graphics): void
  + StartGame(int, boolean): Game
  - timeCycled(): boolean
  - crashEvent(): void
  + paint(Graphics): void
  + Loop(): void
  + Game(int):
}
class ImageManager {
  + getImage(String): BufferedImage
  + getImage(Object): BufferedImage
  + ImageManager():
}
class MouseController {
  + SetControl(Game, WarplaneHero): void
  + MouseController():
}
class MusicThread {
  - cleanUp(): void
  + run(): void
  + musicOn(boolean): void
  + musicOff(): void
  - stopPlaying(): void
  - MusicThread(File, boolean):
}
class Program {
  + main(String[]): void
  + Program():
}
class Prop {
  + takeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + GenerateProp(Warplane): Prop?
  + goForward(): void
  + Prop(Warplane):
}
class PropBomb {
  + takeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropBomb(Warplane):
}
class PropBullet {
  + takeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropBullet(Warplane):
}
class PropHealth {
  + takeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropHealth(Warplane):
}
class Record {
  - difficulty: String
  - time: String
  - score: int
  - userName: String
   time: String
   difficulty: String
   score: int
   userName: String
  + Record(String, String, int, String):
}
interface RecordExport << interface >> {
   allRecords: List<Record>
  + addRecord(Record): void
  + deleteRecord(Record): void
}
class RecordImplement {
   allRecords: List<Record>
  + addRecord(Record): void
  + writeToFile(): void
  + deleteRecord(Record): void
  + RecordImplement():
}
class StartsMenu {
  - musicOn: boolean
  - panel: JPanel
  - difficulty: int
   panel: JPanel
   difficulty: int
   musicOn: boolean
  - onButtonClicked(): void
  + $$$getRootComponent$$$(): JComponent
  - $$$setupUI$$$(): void
  + StartsMenu():
}
class Warplane {
  # health: int
   score: int
   health: int
   shots: List<Bullet>
  + ChangeHealth(int): void
  + Warplane(int, int, int, int, int):
}
class WarplaneBoss {
   score: int
   shots: List<Bullet>
  + goForward(): void
  + WarplaneBoss(int, int, int, int, int):
}
class WarplaneElite {
   score: int
   shots: List<Bullet>
  + goForward(): void
  + WarplaneElite(int, int, int, int, int):
}
class WarplaneEnemy {
   score: int
   shots: List<Bullet>
  + goForward(): void
  + WarplaneEnemy(int, int, int, int, int):
}
class WarplaneHero {
   score: int
   shots: List<Bullet>
  + goForward(): void
  + WarplaneHero(int, int, int, int, int):
}

Bullet           -[#000082,plain]-^  Flying
BulletEnemy      -[#000082,plain]-^  Bullet
BulletHero       -[#000082,plain]-^  Bullet
Prop             -[#000082,plain]-^  Flying
PropBomb         -[#000082,plain]-^  Prop
PropBullet       -[#000082,plain]-^  Prop
PropHealth       -[#000082,plain]-^  Prop
RecordImplement  -[#008200,dashed]-^  RecordExport
Warplane         -[#000082,plain]-^  Flying
WarplaneBoss     -[#000082,plain]-^  Warplane
WarplaneElite    -[#000082,plain]-^  Warplane
WarplaneEnemy    -[#000082,plain]-^  Warplane
WarplaneHero     -[#000082,plain]-^  Warplane
@enduml
