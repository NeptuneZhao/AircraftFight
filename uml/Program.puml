@startuml

class Bullet {
  - power: int
   power: int
  + GoForward(): void
  + Bullet(int, int, int, int, int):
}
class BulletEnemy {
  + BulletEnemy(int, int, int, int, int):
}
class BulletHero {
  + BulletHero(int, int, int, int, int):
}
class Flying {
  + GetWidth(): int
  + GetNotFlying(): boolean
  + GetSpeedX(): int
  + SetLocation(double, double): void
  + GetImage(): BufferedImage
  + GoForward(): void
  + GetY(): int
  + GetSpeedY(): int
  + GetX(): int
  + GetHeight(): int
  + IsCrash(Flying): boolean
  + SetVanish(): void
  + Flying(int, int, int, int):
}
class Game {
  - PaintScoreAndHealth(Graphics): void
  - timeCycled(): boolean
  + StartGame(int, boolean): Game
  + Loop(): void
  + paint(Graphics): void
  - PaintImageWithPositionRevised(Graphics, List<Flying>): void
  - crashEvent(): void
  + Game(int):
}
class ImageManager {
  + GetImage(String): BufferedImage
  + GetImage(Object): BufferedImage
  + ImageManager():
}
class MouseController {
  + SetControl(Game, WarplaneHero): void
  + MouseController():
}
class MusicThread {
  + MusicOff(MusicThread): void
  - cleanUp(): void
  + run(): void
  - stopPlaying(): void
  + MusicOn(MusicThread): void
  - MusicThread(File, boolean):
}
class Program {
  + main(String[]): void
  + Program():
}
class Prop {
  + GenerateProp(Warplane): Prop?
  + GoForward(): void
  + TakeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + Prop(Warplane):
}
class PropBomb {
  + TakeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropBomb(Warplane):
}
class PropBullet {
  + TakeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropBullet(Warplane):
}
class PropHealth {
  + TakeEffect(WarplaneHero, List<Warplane>, List<Bullet>): void
  + PropHealth(Warplane):
}
entity Record << record >> {
  + score(): int
  + difficulty(): String
  + userName(): String
  + time(): String
  + Record(String, String, int, String):
}
interface RecordExport << interface >> {
  + AddRecord(Record): void
  + DeleteRecord(Record): void
  + GetAllRecords(): List<Record>
}
class RecordImplement {
  + GetAllRecords(): List<Record>
  + AddRecord(Record): void
  + DeleteRecord(Record): void
  + WriteToFile(): void
  + RecordImplement():
}
class StartsMenu {
  - onButtonClicked(): void
  + GetPanel(): JPanel
  + GetDifficulty(): int
  + IsMusicOn(): boolean
  - $$$setupUI$$$(): void
  + $$$getRootComponent$$$(): JComponent
  + StartsMenu():
}
class Warplane {
  - health: int
   health: int
   score: int
  + ChangeHealth(int): void
  + GetShots(): List<Bullet>
  + Warplane(int, int, int, int, int):
}
class WarplaneBoss {
   score: int
  + GoForward(): void
  + GetShots(): List<Bullet>
  + WarplaneBoss(int, int, int, int, int):
}
class WarplaneElite {
   score: int
  + GoForward(): void
  + GetShots(): List<Bullet>
  + WarplaneElite(int, int, int, int, int):
}
class WarplaneEnemy {
   score: int
  + GoForward(): void
  + GetShots(): List<Bullet>
  + WarplaneEnemy(int, int, int, int, int):
}
class WarplaneHero {
   score: int
  + GoForward(): void
  + GetShots(): List<Bullet>
  + WarplaneHero(int, int, int, int, int):
}

Bullet           -[#000082,plain]-^  Flying
BulletEnemy      -[#000082,plain]-^  Bullet
BulletHero       -[#000082,plain]-^  Bullet
Prop             -[#000082,plain]-^  Flying
PropBomb         -[#000082,plain]-^  Prop
PropBullet       -[#000082,plain]-^  Prop
PropHealth       -[#000082,plain]-^  Prop
RecordImplement  -[#008200,dashed]-^  RecordExport
Warplane         -[#000082,plain]-^  Flying
WarplaneBoss     -[#000082,plain]-^  Warplane
WarplaneElite    -[#000082,plain]-^  Warplane
WarplaneEnemy    -[#000082,plain]-^  Warplane
WarplaneHero     -[#000082,plain]-^  Warplane
@enduml
