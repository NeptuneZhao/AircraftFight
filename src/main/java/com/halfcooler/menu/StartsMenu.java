package com.halfcooler.menu;

import com.halfcooler.Program;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.lang.reflect.Method;
import java.util.Objects;
import java.util.ResourceBundle;

// Debug Pass
public class StartsMenu extends JFrame
{
	private JPanel panel;
	private JButton difficultyEasyButton;
	private JButton difficultyNormalButton;
	private JButton difficultyHardButton;
	private JCheckBox musicCheckBox;
	private JComboBox<String> comboBox1;
	private JLabel fpsLabel;

	private int difficulty = 0;
	private boolean musicOn = false;
	private int fps = 0;

	public StartsMenu()
	{

		$$$setupUI$$$();

		this.difficultyEasyButton.addActionListener((ActionEvent ignored) ->
		{
			this.difficulty = 0;
			this.onButtonClicked();
		});

		this.difficultyNormalButton.addActionListener((ActionEvent ignored) ->
		{
			this.difficulty = 1;
			this.onButtonClicked();
		});

		this.difficultyHardButton.addActionListener((ActionEvent ignored) ->
		{
			this.difficulty = 2;
			this.onButtonClicked();
		});
	}

	public JPanel GetPanel()
	{
		return this.panel;
	}

	public int GetDifficulty()
	{
		return this.difficulty;
	}

	public boolean IsMusicOn()
	{
		return this.musicOn;
	}

	/// @return default 60
	/// @see DisplayMode#getRefreshRate()
	public int GetFps()
	{
		return this.fps == 0 ? 60 : this.fps;
	}

	private void onButtonClicked()
	{
		this.panel.setVisible(false);
		this.musicOn = musicCheckBox.isSelected();
		this.fps = this.comboBox1.getSelectedItem() == "V-Sync" ?
			GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getRefreshRate() :
			Integer.parseInt((String) Objects.requireNonNull(this.comboBox1.getSelectedItem()));

		synchronized (Program.MainLock)
		{
			Program.MainLock.notify();
		}
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		difficultyEasyButton = new JButton();
		this.$$$loadButtonText$$$(difficultyEasyButton, this.$$$getMessageFromBundle$$$("language", "mode.easy"));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		panel.add(difficultyEasyButton, gbc);
		difficultyNormalButton = new JButton();
		this.$$$loadButtonText$$$(difficultyNormalButton, this.$$$getMessageFromBundle$$$("language", "mode.normal"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		panel.add(difficultyNormalButton, gbc);
		musicCheckBox = new JCheckBox();
		this.$$$loadButtonText$$$(musicCheckBox, this.$$$getMessageFromBundle$$$("language", "mode.music"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		panel.add(musicCheckBox, gbc);
		difficultyHardButton = new JButton();
		this.$$$loadButtonText$$$(difficultyHardButton, this.$$$getMessageFromBundle$$$("language", "mode.hard"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		panel.add(difficultyHardButton, gbc);
		comboBox1 = new JComboBox<String>();
		final DefaultComboBoxModel<String> defaultComboBoxModel1 = new DefaultComboBoxModel<>();
		defaultComboBoxModel1.addElement("V-Sync");
		defaultComboBoxModel1.addElement("45");
		defaultComboBoxModel1.addElement("60");
		defaultComboBoxModel1.addElement("90");
		defaultComboBoxModel1.addElement("120");
		comboBox1.setModel(defaultComboBoxModel1);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		panel.add(comboBox1, gbc);
		fpsLabel = new JLabel();
		fpsLabel.setHorizontalAlignment(0);
		fpsLabel.setHorizontalTextPosition(0);
		this.$$$loadLabelText$$$(fpsLabel, this.$$$getMessageFromBundle$$$("language", "mode.fps"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		panel.add(fpsLabel, gbc);
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key)
	{
		ResourceBundle bundle;
		try
		{
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null)
			{
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e)
		{
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text)
	{
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++)
		{
			if (text.charAt(i) == '&')
			{
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&')
				{
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic)
		{
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text)
	{
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++)
		{
			if (text.charAt(i) == '&')
			{
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&')
				{
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic)
		{
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return panel;
	}

}
