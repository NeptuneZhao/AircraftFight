package com.halfcooler.menu;

import com.halfcooler.game.statistics.Resources;
import com.halfcooler.game.utils.ResourcesBundler;
import com.halfcooler.game.utils.SwingUtils;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

public final class HallOfFameMenu extends JFrame
{
	public static final HallOfFameMenu HoFInstance = new HallOfFameMenu();

	private JPanel panel;
	private JScrollPane scroll;
	private JButton OKButton;
	private JButton cancelButton;
	private JTable table1;
	private JPanel buttonPanel;

	private final ResourcesBundler rb = new ResourcesBundler();

	private HallOfFameMenu()
	{
		$$$setupUI$$$();

		this.setContentPane(panel);
		this.setResizable(false);
		this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		this.setTitle(rb.GetMessage("record.button"));
		this.setSize(1280, 720);
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		createUIComponents();
		panel = new JPanel();
		panel.setLayout(new GridBagLayout());
		scroll = new JScrollPane();
		scroll.setEnabled(true);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel.add(scroll, gbc);
		table1.setForeground(new Color(-16777216));
		table1.setGridColor(new Color(-11579054));
		scroll.setViewportView(table1);
		buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.fill = GridBagConstraints.BOTH;
		panel.add(buttonPanel, gbc);
		OKButton = new JButton();
		SwingUtils.LoadButtonText(OKButton, rb.GetMessage("button.ok"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		buttonPanel.add(OKButton, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		buttonPanel.add(spacer1, gbc);
		cancelButton = new JButton();
		SwingUtils.LoadButtonText(cancelButton, rb.GetMessage("button.cancel"));
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		buttonPanel.add(cancelButton, gbc);
	}
	
	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return panel;
	}

	private void createUIComponents()
	{
		String[] columnNames =
			{
				"UUID",
				rb.GetMessage("record.name"),
				rb.GetMessage("record.difficulty"),
				rb.GetMessage("record.time"),
				rb.GetMessage("record.score"),
				rb.GetMessage("record.damage"),
				rb.GetMessage("record.killed.total"),
				rb.GetMessage("record.killed.enemy"),
				rb.GetMessage("record.killed.elite"),
				rb.GetMessage("record.killed.plus"),
				rb.GetMessage("record.killed.boss")
			};

		List<String[]> data = new ArrayList<>();
		for (var record : Resources.Recorder.LoadRecords())
			data.add(record.ToString());

		String[][] dataArray = new String[data.size()][];
		for (int i = 0; i < data.size(); i++)
			dataArray[i] = data.get(i);

		table1 = new JTable(dataArray, columnNames);
		table1.setModel(new DefaultTableModel(dataArray, columnNames)
		{
			@Override
			public boolean isCellEditable(int row, int column)
			{
				return false;
			}

			// 选中时查看本行数据
			@Override
			public void setValueAt(Object aValue, int row, int column)
			{
				super.setValueAt(aValue, row, column);
				if (aValue != null)
					System.out.println("Selected Row Data: " + String.join(", ", (String[]) aValue));
			}

			@Override
			public void removeRow(int row)
			{
				super.removeRow(row);
				// 删除对应的记录文件
				Resources.Recorder.DeleteRecordByIndex(row);
			}
		});

		table1.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "deleteRow");
		table1.getActionMap().put("deleteRow", new AbstractAction()
		{
			@Override
			public void actionPerformed(ActionEvent e)
			{
				int selectedRow = table1.getSelectedRow();
				if (selectedRow != -1) ((DefaultTableModel) table1.getModel()).removeRow(selectedRow);
			}
		});
	}
}
