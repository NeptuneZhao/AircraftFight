package com.halfcooler.menu;

import com.halfcooler.flying.warplane.WarplaneHero;
import com.halfcooler.game.record.Record;
import com.halfcooler.game.record.Recorder;
import com.halfcooler.utils.ResourcesBundler;
import com.halfcooler.utils.SwingUtilities;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.UUID;

public class DeadDialog extends JDialog
{
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextField textField1;
	private JLabel difficultyLabel;
	private JLabel timeLabel;
	private JLabel timeHS;
	private JLabel scoreLabel;
	private JLabel scoreHS;
	private JLabel damageLabel;
	private JLabel damageHS;
	private JLabel totalLabel;
	private JLabel totalHS;
	private JLabel enemyLabel;
	private JLabel enemyHS;
	private JLabel eliteLabel;
	private JLabel eliteHS;
	private JLabel plusLabel;
	private JLabel plusHS;
	private JLabel bossLabel;
	private JLabel bossHS;

	private final WarplaneHero warplaneHero;
	private final ResourcesBundler rb = new ResourcesBundler();

	public DeadDialog(WarplaneHero hero)
	{
		this.warplaneHero = hero;
		$$$setupUI$$$();
		setContentPane(contentPane);
		setModal(true);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(_ -> onOK());

		buttonCancel.addActionListener(_ -> onCancel());

		// 点击 X 时调用 onCancel()
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent e)
			{
				onCancel();
			}
		});

		// 遇到 ESCAPE 时调用 onCancel()
		contentPane.registerKeyboardAction(_ -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		// 显示各项数据
		java.util.List<Record> records = Recorder.ReadBinaryRecord();

		// 难度
		this.difficultyLabel.setText(rb.GetMessage(switch (hero.Difficulty)
		{
			case 0 -> "mode.easy";
			case 1 -> "mode.normal";
			case 2 -> "mode.hard";
			default -> throw new IllegalStateException("Unexpected value: " + hero.Difficulty);
		}));

		String highScoreText = rb.GetMessage("record.high_score");

		// 时间
		this.timeLabel.setText(String.valueOf(hero.Time));
		this.timeHS.setText(hero.Time > records.stream().mapToInt(Record::time).max().orElse(0) ? highScoreText : "");

		// 分数
		this.scoreLabel.setText(String.valueOf(hero.Score));
		this.scoreHS.setText(hero.Score > records.stream().mapToInt(Record::score).max().orElse(0) ? highScoreText : "");

		// 伤害
		this.damageLabel.setText(String.valueOf(hero.DamagedTotal));
		this.damageHS.setText(hero.DamagedTotal < records.stream().mapToInt(Record::damage).max().orElse(0) ? rb.GetMessage("record.min_damage") : "");

		// 击杀总数
		this.totalLabel.setText(String.valueOf(hero.Total));
		this.totalHS.setText(hero.Total > records.stream().mapToInt(Record::total).max().orElse(0) ? highScoreText : "");

		// 击杀普通
		this.enemyLabel.setText(String.valueOf(hero.Enemy));
		this.enemyHS.setText(hero.Enemy > records.stream().mapToInt(Record::enemy).max().orElse(0) ? highScoreText : "");

		// 击杀精英
		this.eliteLabel.setText(String.valueOf(hero.Elite));
		this.eliteHS.setText(hero.Elite > records.stream().mapToInt(Record::elite).max().orElse(0) ? highScoreText : "");

		// 击杀超级
		this.plusLabel.setText(String.valueOf(hero.Plus));
		this.plusHS.setText(hero.Plus > records.stream().mapToInt(Record::plus).max().orElse(0) ? highScoreText : "");

		// 击杀Boss
		this.bossLabel.setText(String.valueOf(hero.Boss));
		this.bossHS.setText(hero.Boss > records.stream().mapToInt(Record::boss).max().orElse(0) ? highScoreText : "");

	}

	private void onOK()
	{
		// 记录成绩
		String name = textField1.getText().trim();
		if (name.isEmpty())
			// 生成一个UUID
			name = "Anonymous";
		else if (name.length() > 56)
			name = name.substring(0, 56);
		Recorder.SaveBinaryRecord(new Record(UUID.randomUUID(), name, warplaneHero.Difficulty, warplaneHero.Time, warplaneHero.Score, warplaneHero.DamagedTotal, warplaneHero.Total, warplaneHero.Enemy, warplaneHero.Elite, warplaneHero.Plus, warplaneHero.Boss));
		dispose();
	}

	private void onCancel()
	{
		// 必要时在此处添加您的代码
		dispose();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		contentPane = new JPanel();
		contentPane.setLayout(new GridBagLayout());
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.gridwidth = 4;
		gbc.weightx = 1.0;
		gbc.anchor = GridBagConstraints.EAST;
		contentPane.add(panel1, gbc);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel2, gbc);
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(buttonCancel, gbc);
		buttonOK = new JButton();
		buttonOK.setText("OK");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(buttonOK, gbc);
		final JLabel label1 = new JLabel();
		label1.setHorizontalTextPosition(0);
		SwingUtilities.LoadLabelText(label1, rb.GetMessage("dead.name"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 4;
		gbc.weighty = 1.0;
		contentPane.add(label1, gbc);
		final JLabel label2 = new JLabel();
		SwingUtilities.LoadLabelText(label2, rb.GetMessage("dead.input_name"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = 3;
		gbc.gridheight = 2;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		contentPane.add(label2, gbc);
		textField1 = new JTextField();
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 2;
		gbc.gridheight = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		contentPane.add(textField1, gbc);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.BOTH;
		contentPane.add(panel3, gbc);
		difficultyLabel = new JLabel();
		difficultyLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(difficultyLabel, gbc);
		final JLabel label3 = new JLabel();
		SwingUtilities.LoadLabelText(label3, rb.GetMessage("record.difficulty"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label3, gbc);
		final JLabel label4 = new JLabel();
		SwingUtilities.LoadLabelText(label4, rb.GetMessage("record.time"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label4, gbc);
		timeLabel = new JLabel();
		timeLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(timeLabel, gbc);
		final JLabel label5 = new JLabel();
		SwingUtilities.LoadLabelText(label5, rb.GetMessage("record.score"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label5, gbc);
		scoreLabel = new JLabel();
		scoreLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(scoreLabel, gbc);
		final JLabel label6 = new JLabel();
		SwingUtilities.LoadLabelText(label6, rb.GetMessage("record.damage"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label6, gbc);
		damageLabel = new JLabel();
		damageLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(damageLabel, gbc);
		final JLabel label7 = new JLabel();
		SwingUtilities.LoadLabelText(label7, rb.GetMessage("record.killed.total"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 8;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label7, gbc);
		totalLabel = new JLabel();
		totalLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 8;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(totalLabel, gbc);
		final JLabel label8 = new JLabel();
		SwingUtilities.LoadLabelText(label8, rb.GetMessage("record.killed.enemy"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 10;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label8, gbc);
		enemyLabel = new JLabel();
		enemyLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 10;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(enemyLabel, gbc);
		final JLabel label9 = new JLabel();
		SwingUtilities.LoadLabelText(label9, rb.GetMessage("record.killed.elite"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 11;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label9, gbc);
		eliteLabel = new JLabel();
		eliteLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 11;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(eliteLabel, gbc);
		final JLabel label10 = new JLabel();
		SwingUtilities.LoadLabelText(label10, rb.GetMessage("record.killed.plus"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 12;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label10, gbc);
		plusLabel = new JLabel();
		plusLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 12;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(plusLabel, gbc);
		scoreHS = new JLabel();
		scoreHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(scoreHS, gbc);
		timeHS = new JLabel();
		timeHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(timeHS, gbc);
		damageHS = new JLabel();
		damageHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(damageHS, gbc);
		totalHS = new JLabel();
		totalHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 8;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(totalHS, gbc);
		enemyHS = new JLabel();
		enemyHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 10;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(enemyHS, gbc);
		eliteHS = new JLabel();
		eliteHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 11;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(eliteHS, gbc);
		plusHS = new JLabel();
		plusHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 12;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(plusHS, gbc);
		final JLabel label11 = new JLabel();
		SwingUtilities.LoadLabelText(label11, rb.GetMessage("record.killed.boss"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 13;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label11, gbc);
		bossLabel = new JLabel();
		bossLabel.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 13;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(bossLabel, gbc);
		bossHS = new JLabel();
		bossHS.setText("Label");
		gbc = new GridBagConstraints();
		gbc.gridx = 3;
		gbc.gridy = 13;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(bossHS, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer1, gbc);
		final JPanel spacer2 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer2, gbc);
		final JPanel spacer3 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer3, gbc);
		final JPanel spacer4 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer4, gbc);
		final JPanel spacer5 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 9;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer5, gbc);
		final JPanel spacer6 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 14;
		gbc.gridwidth = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		panel3.add(spacer6, gbc);
		final JPanel spacer7 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(spacer7, gbc);
	}

	public JComponent $$$getRootComponent$$$()
	{
		return contentPane;
	}

}
